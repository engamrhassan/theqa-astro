{
  "version": 3,
  "sources": ["../../../worker.js"],
  "sourceRoot": "/Users/amrmegahed/amr/MMNow/theqa-astro/broker-proxy-worker/.wrangler/tmp/deploy-q0uVsb",
  "sourcesContent": ["// Cloudflare Worker for Dynamic Broker Sorting\nexport default {\n  async fetch(request, env, ctx) {\n    try {\n      const url = new URL(request.url);\n      \n      // Cache purge endpoint (for manual clearing when needed)\n      if (url.pathname === '/__purge-cache' && request.method === 'POST') {\n        return handleCachePurge(request, url, env);\n      }\n      \n      // Skip processing for static assets\n      if (isStaticAsset(url.pathname)) {\n        return fetch(request);\n      }\n      \n      // Get user's country code from Cloudflare\n      const countryCode = request.cf?.country || 'US';\n      \n      // Check if this route should get dynamic broker data\n      const shouldProcess = await checkDynamicRoute(env.DB, url.pathname);\n      \n      if (!shouldProcess) {\n        // For other pages, pass through to origin\n        return fetch(request);\n      }\n\n      // Fetch original page from Astro\n      const originalResponse = await fetch(request);\n      if (!originalResponse.ok) {\n        return originalResponse;\n      }\n\n      // Only process HTML responses\n      const contentType = originalResponse.headers.get('content-type') || '';\n      if (!contentType.includes('text/html')) {\n        return originalResponse;\n      }\n\n      // Get HTML and inject broker data\n      let html = await originalResponse.text();\n      const brokerData = await getBrokersForCountry(env.DB, countryCode);\n      const unsupportedBrokers = await getUnsupportedBrokers(env.DB, countryCode);\n      html = injectBrokerData(html, brokerData, countryCode, unsupportedBrokers);\n      \n      console.log(`Processing ${url.pathname} for country ${countryCode}, found ${unsupportedBrokers.length} restrictions`);\n\n      // Return modified response with proper cache headers\n      return new Response(html, {\n        status: originalResponse.status,\n        statusText: originalResponse.statusText,\n        headers: {\n          'Content-Type': 'text/html; charset=utf-8',\n          'Cache-Control': 'public, max-age=3600, s-maxage=3600, stale-while-revalidate=300', // 1 hour cache\n          'X-Country-Code': countryCode,\n          'X-Broker-Count': brokerData.length.toString(),\n          'X-Unsupported-Count': unsupportedBrokers.length.toString(),\n          'Vary': 'CF-IPCountry', // Cache varies by country\n          'X-Frame-Options': 'SAMEORIGIN',\n          'X-Content-Type-Options': 'nosniff'\n        }\n      });\n\n    } catch (error) {\n      console.error('Worker error:', error);\n      // On error, pass through to origin\n      return fetch(request);\n    }\n  }\n};\n\n// Check if the request is for a static asset\nfunction isStaticAsset(pathname) {\n  const staticExtensions = [\n    '.css', '.js', '.png', '.jpg', '.jpeg', '.gif', '.svg', '.ico', \n    '.woff', '.woff2', '.ttf', '.eot', '.pdf', '.zip', '.mp4', '.webm',\n    '.webp', '.avif', '.map', '.xml', '.txt', '.json'\n  ];\n  \n  const staticPaths = [\n    '/_astro/', '/images/', '/assets/', '/static/', '/public/',\n    '/favicon.', '/robots.txt', '/sitemap.xml', '/manifest.json'\n  ];\n  \n  // Check file extensions\n  const hasStaticExtension = staticExtensions.some(ext => \n    pathname.toLowerCase().endsWith(ext)\n  );\n  \n  // Check static paths\n  const isStaticPath = staticPaths.some(path => \n    pathname.toLowerCase().includes(path.toLowerCase())\n  );\n  \n  return hasStaticExtension || isStaticPath;\n}\n\n// Handle cache purge requests\nasync function handleCachePurge(request, url, env) {\n  try {\n    // Simple auth check (add your own auth token)\n    const authHeader = request.headers.get('Authorization');\n    if (authHeader !== `Bearer ${env.PURGE_TOKEN || 'your-secret-token'}`) {\n      return new Response(JSON.stringify({ error: 'Unauthorized' }), {\n        status: 401,\n        headers: { 'Content-Type': 'application/json' }\n      });\n    }\n\n    // Since we're using Cloudflare's edge cache, we can't purge it from the worker\n    // But we can return a success and rely on the API call from Laravel\n    return new Response(JSON.stringify({ \n      success: true, \n      message: 'Cache purge initiated. Use Cloudflare API for edge cache purge.' \n    }), {\n      status: 200,\n      headers: { 'Content-Type': 'application/json' }\n    });\n    \n  } catch (error) {\n    return new Response(JSON.stringify({ error: error.message }), { \n      status: 500,\n      headers: { 'Content-Type': 'application/json' }\n    });\n  }\n}\n\n// Get brokers for specific country from database\nasync function getBrokersForCountry(database, countryCode) {\n  try {\n    // Query for country-specific brokers with restriction info\n    const query = `\n      SELECT b.id, b.name, b.logo, b.rating, b.min_deposit, b.description, \n             cs.sort_order, uc.restriction_type, uc.reason, uc.alternative_broker_id\n      FROM brokers b\n      JOIN country_sorting cs ON b.id = cs.broker_id\n      LEFT JOIN unsupported_countries uc ON b.id = uc.broker_id AND uc.country_code = ? AND uc.is_active = 1\n      WHERE cs.country_code = ? AND b.is_active = 1\n      ORDER BY cs.sort_order ASC\n      LIMIT 6\n    `;\n    \n    const result = await database.prepare(query).bind(countryCode, countryCode).all();\n    \n    if (result.results && result.results.length > 0) {\n      return result.results;\n    }\n    \n    // Fallback to default brokers if no country-specific data\n    console.log(`No data for ${countryCode}, using defaults`);\n    const defaultQuery = `\n      SELECT b.id, b.name, b.logo, b.rating, b.min_deposit, b.description, \n             b.default_sort_order as sort_order, uc.restriction_type, uc.reason, uc.alternative_broker_id\n      FROM brokers b\n      LEFT JOIN unsupported_countries uc ON b.id = uc.broker_id AND uc.country_code = ? AND uc.is_active = 1\n      WHERE b.is_active = 1\n      ORDER BY b.default_sort_order ASC\n      LIMIT 4\n    `;\n    \n    const defaultResult = await database.prepare(defaultQuery).bind(countryCode).all();\n    return defaultResult.results || getHardcodedBrokers();\n    \n  } catch (error) {\n    console.error(`Database error for ${countryCode}:`, error);\n    return getHardcodedBrokers();\n  }\n}\n\n// Get unsupported brokers and their alternatives for a country\nasync function getUnsupportedBrokers(database, countryCode) {\n  try {\n    const query = `\n      SELECT uc.broker_id, uc.company_id, uc.restriction_type, uc.reason, \n             b.name as broker_name, b.logo as broker_logo, b.company_id as broker_company_id,\n             alt.id as alternative_id, alt.name as alternative_name, \n             alt.logo as alternative_logo, alt.website_url as alternative_url\n      FROM unsupported_countries uc\n      JOIN brokers b ON uc.broker_id = b.id\n      LEFT JOIN brokers alt ON uc.alternative_broker_id = alt.id\n      WHERE uc.country_code = ? AND uc.is_active = 1 AND b.is_active = 1\n    `;\n    \n    const result = await database.prepare(query).bind(countryCode).all();\n    return result.results || [];\n    \n  } catch (error) {\n    console.error(`Error fetching unsupported brokers for ${countryCode}:`, error);\n    return [];\n  }\n}\n\n// Hardcoded fallback brokers (when DB is unavailable)\nfunction getHardcodedBrokers() {\n  return [\n    { \n      id: 1, \n      name: 'eVest', \n      rating: 4.2, \n      min_deposit: 250, \n      description: '\u0648\u0633\u064A\u0637 \u0645\u062A\u0639\u062F\u062F \u0627\u0644\u062A\u0646\u0638\u064A\u0645 \u0645\u0639 \u0641\u0631\u0648\u0642 \u0623\u0633\u0639\u0627\u0631 \u062A\u0646\u0627\u0641\u0633\u064A\u0629',\n      sort_order: 1\n    },\n    { \n      id: 2, \n      name: 'Exness', \n      rating: 4.5, \n      min_deposit: 10, \n      description: '\u0648\u0633\u064A\u0637 \u0634\u0647\u064A\u0631 \u0645\u0639 \u062D\u062F \u0623\u062F\u0646\u0649 \u0645\u0646\u062E\u0641\u0636 \u0644\u0644\u0625\u064A\u062F\u0627\u0639',\n      sort_order: 2\n    },\n    { \n      id: 3, \n      name: 'AvaTrade', \n      rating: 4.1, \n      min_deposit: 100, \n      description: '\u0648\u0633\u064A\u0637 \u0631\u0627\u0633\u062E \u0645\u0639 \u062A\u0646\u0638\u064A\u0645 \u0642\u0648\u064A',\n      sort_order: 3\n    }\n  ];\n}\n\n// Check if route should get dynamic broker data\nasync function checkDynamicRoute(database, pathname) {\n  try {\n    const decodedPath = decodeURIComponent(pathname);\n    \n    // Quick check for common broker routes\n    const commonRoutes = [\n      '\u0634\u0631\u0643\u0627\u062A-\u062A\u062F\u0627\u0648\u0644-\u0645\u0631\u062E\u0635\u0629-\u0641\u064A-\u0627\u0644\u0633\u0639\u0648\u062F\u064A\u0629',\n      '\u0645\u0646\u0635\u0627\u062A-\u062A\u062F\u0627\u0648\u0644-\u0627\u0644\u0639\u0645\u0644\u0627\u062A-\u0627\u0644\u0631\u0642\u0645\u064A\u0629-\u0641\u064A-\u0627\u0644\u0625\u0645\u0627\u0631\u0627\u062A',\n      'reviews',\n      'brokers',\n      'trading-companies',\n      'forex-brokers'\n    ];\n    \n    for (const route of commonRoutes) {\n      if (decodedPath.includes(route)) {\n        return true;\n      }\n    }\n    \n    // Check database for additional routes\n    const query = `\n      SELECT COUNT(*) as count\n      FROM dynamic_routes\n      WHERE is_active = 1 AND (\n        ? LIKE '%' || route_pattern || '%' OR\n        route_pattern LIKE '%' || ? || '%'\n      )\n      LIMIT 1\n    `;\n    \n    const result = await database.prepare(query).bind(decodedPath, decodedPath).first();\n    return result?.count > 0;\n    \n  } catch (error) {\n    console.error('Route check error:', error);\n    // Fallback to basic pattern matching\n    const path = decodeURIComponent(pathname).toLowerCase();\n    return path.includes('\u0634\u0631\u0643\u0627\u062A-\u062A\u062F\u0627\u0648\u0644') || \n           path.includes('\u0645\u0646\u0635\u0627\u062A-\u062A\u062F\u0627\u0648\u0644') ||\n           path.includes('broker') ||\n           path.includes('trading');\n  }\n}\n\n// Inject broker data into HTML\nfunction injectBrokerData(html, brokers, countryCode, unsupportedBrokers = []) {\n  try {\n    // Safely stringify the data\n    const safeUnsupportedBrokers = JSON.stringify(unsupportedBrokers || []);\n    const safeCountryCode = countryCode.replace(/'/g, \"\\\\'\");\n    const safeCountryName = getCountryName(countryCode).replace(/'/g, \"\\\\'\");\n    \n    // Inject country and unsupported brokers data as JavaScript variables\n    const countryDataScript = `\n    <script>\n      window.USER_COUNTRY = '${safeCountryCode}';\n      window.UNSUPPORTED_BROKERS = ${safeUnsupportedBrokers};\n      window.COUNTRY_NAME = '${safeCountryName}';\n      console.log('Worker data loaded for country:', '${safeCountryCode}');\n    </script>\n  `;\n    \n    // Inject the script before closing head tag\n    if (html.includes('</head>')) {\n      html = html.replace('</head>', countryDataScript + '</head>');\n    } else {\n      // Fallback: inject at the beginning of body\n      html = html.replace('<body>', '<body>' + countryDataScript);\n    }\n    \n    // Handle broker placeholder if it exists\n    const brokerPlaceholder = '<!-- BROKERS_PLACEHOLDER -->';\n    if (html.includes(brokerPlaceholder)) {\n      const brokerHtml = generateBrokerHtml(brokers, countryCode);\n      html = html.replace(brokerPlaceholder, brokerHtml);\n    }\n\n    // Handle beginner brokers placeholder if it exists\n    const beginnerPlaceholder = '<!-- BEGINNER_BROKERS_PLACEHOLDER -->';\n    if (html.includes(beginnerPlaceholder)) {\n      const beginnerHtml = generateBeginnerBrokerHtml(brokers, countryCode);\n      html = html.replace(beginnerPlaceholder, beginnerHtml);\n    }\n\n    // Handle [beginner-57] placeholder directly\n    if (html.includes('[beginner-57]')) {\n      const beginnerHtml = generateBeginnerBrokerHtml(brokers, countryCode);\n      html = html.replace(/\\[beginner-57\\]/g, beginnerHtml);\n    }\n    \n    return html;\n  } catch (error) {\n    console.error('Error injecting broker data:', error);\n    return html;\n  }\n}\n\n// Generate broker HTML\nfunction generateBrokerHtml(brokers, countryCode) {\n  if (!brokers || brokers.length === 0) {\n    return `\n      <div style=\"text-align: center; padding: 2rem; color: #6b7280; background: #f9fafb; border-radius: 0.5rem;\">\n        <p>\u0644\u0627 \u062A\u0648\u062C\u062F \u0634\u0631\u0643\u0627\u062A \u062A\u062F\u0627\u0648\u0644 \u0645\u062A\u0627\u062D\u0629 \u062D\u0627\u0644\u064A\u0627\u064B \u0641\u064A \u0645\u0646\u0637\u0642\u062A\u0643.</p>\n      </div>\n    `;\n  }\n\n  let html = '<div class=\"companies-grid\">';\n  \n  brokers.forEach((broker, index) => {\n    const minDeposit = broker.min_deposit || 0;\n    const rating = broker.rating || 0;\n    const description = broker.description || '\u0648\u0633\u064A\u0637 \u0645\u0648\u062B\u0648\u0642 \u0644\u0644\u062A\u062F\u0627\u0648\u0644';\n    const logoColor = getBrokerLogoColor(broker.name);\n    \n    // Generate star icons\n    const starsHtml = Array(4).fill().map(() => `\n      <svg class=\"company-star\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"#2563eb\">\n        <path d=\"M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z\"/>\n      </svg>\n    `).join('');\n    \n    html += `\n      <article class=\"company-card\" data-position=\"${index + 1}\" data-broker-id=\"${broker.id}\">\n        <div class=\"company-logo\">\n          <div class=\"company-logo-container\" style=\"background: ${logoColor};\">\n            <span class=\"broker-name\">${broker.name}</span>\n          </div>\n        </div>\n        <div class=\"company-info\">\n          <div class=\"company-rating\">\n            <div class=\"company-stars\">\n              ${starsHtml}\n            </div>\n          </div>\n          <div class=\"company-license\">\n            <div class=\"company-license-label\">\u0627\u0644\u062A\u0631\u0627\u062E\u064A\u0635</div>\n            <div class=\"company-license-value\">FCA</div>\n          </div>\n          <div class=\"company-details\">\n            <div class=\"company-min-deposit\">\u0623\u0642\u0644 \u0645\u0628\u0644\u063A \u0644\u0644\u0625\u064A\u062F\u0627\u0639</div>\n            <div class=\"company-deposit-amount\">${minDeposit}</div>\n          </div>\n        </div>\n        <button class=\"company-open-account-btn\">\u0641\u062A\u062D \u062D\u0633\u0627\u0628</button>\n      </article>\n    `;\n  });\n  \n  html += '</div>';\n  return html;\n}\n\n// Get broker logo color based on name\nfunction getBrokerLogoColor(name) {\n  const colors = {\n    'exness': '#fbbf24',\n    'evest': '#1e40af', \n    'xtb': '#dc2626',\n    'avatrade': '#4f46e5',\n    'default': '#6366f1'\n  };\n  \n  const lowerName = name.toLowerCase();\n  return colors[lowerName] || colors.default;\n}\n\n// Generate beginner broker table HTML\nfunction generateBeginnerBrokerHtml(brokers, countryCode) {\n  if (!brokers || brokers.length === 0) {\n    return `\n      <div style=\"text-align: center; padding: 2rem; color: #6b7280; background: #f9fafb; border-radius: 0.5rem;\">\n        <p>\u0644\u0627 \u062A\u0648\u062C\u062F \u0634\u0631\u0643\u0627\u062A \u062A\u062F\u0627\u0648\u0644 \u0645\u062A\u0627\u062D\u0629 \u062D\u0627\u0644\u064A\u0627\u064B \u0641\u064A \u0645\u0646\u0637\u0642\u062A\u0643.</p>\n      </div>\n    `;\n  }\n\n  let html = '<div class=\"broker-table-wrapper\">';\n  html += '<table class=\"broker-table\">';\n  \n  // Header\n  html += `\n    <thead>\n      <tr class=\"table-header\">\n        <th class=\"header-cell company-header\">\u0627\u0644\u0634\u0631\u0643\u0629</th>\n        <th class=\"header-cell deposit-header\">\u0623\u0642\u0644 \u0645\u0628\u0644\u063A \u0644\u0644\u0625\u064A\u062F\u0627\u0639</th>\n        <th class=\"header-cell rating-header\">\u0627\u0644\u062A\u0642\u064A\u064A\u0645</th>\n      </tr>\n    </thead>\n  `;\n  \n  // Broker rows - limit to top 4 for beginner table\n  const topBrokers = brokers.slice(0, 4);\n  html += '<tbody>';\n  \n  topBrokers.forEach((broker, index) => {\n    const minDeposit = broker.min_deposit || 0;\n    const rating = broker.rating || 0;\n    const logoColor = getBrokerLogoColor(broker.name);\n    \n    html += `\n      <tr class=\"broker-row\" data-position=\"${index + 1}\" data-broker-id=\"${broker.id}\">\n        <td class=\"broker-cell company-cell\">\n          <div class=\"company-info\">\n            <div class=\"company-logo\" style=\"background: ${logoColor}; ${logoColor === '#fbbf24' ? 'color: #1f2937' : ''}\">\n              <span class=\"logo-text\">${broker.name}</span>\n            </div>\n            <span class=\"company-name\">${broker.name}</span>\n          </div>\n        </td>\n        <td class=\"broker-cell deposit-cell\">\n          <span class=\"deposit-amount\">${minDeposit}</span>\n        </td>\n        <td class=\"broker-cell rating-cell\">\n          <span class=\"rating-value\">${rating}/5</span>\n        </td>\n      </tr>\n    `;\n  });\n  \n  html += '</tbody>';\n  \n  // Footer\n  html += `\n    <tfoot>\n      <tr>\n        <td colspan=\"3\" class=\"table-footer\">\n          <div class=\"footer-content\">\n            <span class=\"footer-icon\">\u26A1</span>\n            <span class=\"footer-text\">\u0623\u0641\u0636\u0644 \u0634\u0631\u0643\u0627\u062A \u0627\u0644\u062A\u062F\u0627\u0648\u0644 \u0644\u0644\u0645\u0628\u062A\u062F\u0626\u064A\u0646</span>\n          </div>\n        </td>\n      </tr>\n    </tfoot>\n  `;\n  \n  html += '</table></div>';\n  return html;\n}\n\n// Get country name in Arabic\nfunction getCountryName(countryCode = 'SA') {\n  const countryNames = {\n    'SA': '\u0627\u0644\u0633\u0639\u0648\u062F\u064A\u0629',\n    'AE': '\u0627\u0644\u0625\u0645\u0627\u0631\u0627\u062A', \n    'KW': '\u0627\u0644\u0643\u0648\u064A\u062A',\n    'BH': '\u0627\u0644\u0628\u062D\u0631\u064A\u0646',\n    'QA': '\u0642\u0637\u0631',\n    'OM': '\u0639\u0645\u0627\u0646',\n    'JO': '\u0627\u0644\u0623\u0631\u062F\u0646',\n    'LB': '\u0644\u0628\u0646\u0627\u0646',\n    'EG': '\u0645\u0635\u0631',\n    'IQ': '\u0627\u0644\u0639\u0631\u0627\u0642',\n    'US': '\u0627\u0644\u0648\u0644\u0627\u064A\u0627\u062A \u0627\u0644\u0645\u062A\u062D\u062F\u0629',\n    'GB': '\u0627\u0644\u0645\u0645\u0644\u0643\u0629 \u0627\u0644\u0645\u062A\u062D\u062F\u0629',\n    'DE': '\u0623\u0644\u0645\u0627\u0646\u064A\u0627',\n    'FR': '\u0641\u0631\u0646\u0633\u0627',\n    'TR': '\u062A\u0631\u0643\u064A\u0627'\n  };\n  \n  return countryNames[countryCode] || '\u0645\u0646\u0637\u0642\u062A\u0643';\n}"],
  "mappings": "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",
  "names": []
}
