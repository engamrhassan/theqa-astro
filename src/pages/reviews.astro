---
import BaseLayout from '../layouts/BaseLayout.astro';
import BrokerModal from '../components/BrokerModal.astro';

// Define types for review/broker data
interface ReviewBroker {
  id?: string | number;
  name?: string;
  title?: string;
  company_name?: string;
  broker_name?: string;
  logo?: string;
  rating?: number;
  min_deposit?: number;
  minimum_deposit?: string;
  currency?: string;
  regulation?: string;
  regulations?: string;
  regulatory_body?: string;
  spread?: string;
  spread_commission?: any;
  account_types?: string;
  islamic_account?: boolean;
  features?: string[];
  status?: 'verified' | 'neutral' | 'warning';
  trusted_status?: number;
  is_verified?: boolean;
  is_recommended?: boolean;
  bonus?: string;
  website_url?: string;
  cta_link?: string;
  url?: string;
  review_content?: string;
  content?: string;
  description?: string;
  created_at?: string;
  slug?: string;
  image?: {
    url?: string;
  };
  [key: string]: any;
}

// Fetch reviews/brokers from API endpoint
async function fetchReviewBrokers(): Promise<ReviewBroker[]> {
  try {
    const myHeaders = new Headers();
    myHeaders.append("Accept", "application/json");
    myHeaders.append("X-API-Hash", "b3da624e147174b654c4c9358ac40c4ca716cb9db56b0da0e2f8200553922ac0");
    myHeaders.append("Authorization", "Basic YWRtaW46U0F3S3EzQUg5bVZxVg==");
    
    const requestOptions: RequestInit = {
      method: "GET",
      headers: myHeaders,
      redirect: "follow"
    };
    
    const response = await fetch("https://theqalink.com/api/v1/reviews", requestOptions);
    
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    
    const data = await response.json();
    const reviewsArray = Array.isArray(data) ? data : (data.reviews || data.data || []);
    
    // Transform reviews data to broker card format
    return reviewsArray.map((item: any) => ({
      id: item.id || item.broker_id || Math.random().toString(36).substr(2, 9),
      name: item.name || item.title || item.company_name || item.broker_name || 'شركة تداول',
      logo: item.image?.url || item.logo || item.image,
      rating: parseFloat(item.rating) || Math.floor(Math.random() * 2) + 4, // Default 4-5 stars if no rating
      min_deposit: parseInt(item.minimum_deposit) || item.min_deposit || Math.floor(Math.random() * 100) + 50,
      currency: item.currency || 'USD',
      regulation: item.regulations || item.regulation || item.regulatory_body || 'مُنظم',
      spread: item.spread_commission || item.spread || 'متغير',
      account_types: item.islamic_account ? 'حساب إسلامي' : (item.account_types || 'متعدد'),
      features: item.features || [],
      status: item.trusted_status === 1 || item.is_verified || item.is_recommended ? 'verified' : 
               item.rating && parseFloat(item.rating) >= 4 ? 'verified' : 
               item.rating && parseFloat(item.rating) >= 3 ? 'neutral' : 'warning',
      website_url: item.cta_link || item.website_url || item.url,
      content: item.review_content || item.content || item.description,
      slug: item.slug
    }));
  } catch (error) {
    console.error('Error fetching reviews:', error);
    // Fallback data based on the image provided
    return [
      {
        id: 'exness',
        name: 'Exness',
        rating: 5,
        min_deposit: 10,
        currency: 'USD',
        regulation: 'FCA',
        spread: 'لا يوجد',
        account_types: 'حساب إسلامي',
        features: ['شركة موثوقة'],
        status: 'verified'
      },
      {
        id: 'xtb',
        name: 'XTB',
        rating: 4,
        min_deposit: 100,
        currency: 'USD',
        regulation: 'DFSA',
        spread: 'لا يوجد',
        account_types: 'حساب إسلامي',
        features: ['شركة موثوقة'],
        status: 'verified'
      },
      {
        id: 'evest',
        name: 'Evest',
        rating: 5,
        min_deposit: 50,
        currency: 'USD',
        regulation: 'VFSC',
        spread: 'لا يوجد',
        account_types: 'حساب إسلامي',
        features: ['شركة موثوقة'],
        status: 'verified'
      },
      {
        id: 'moneta-markets',
        name: 'Moneta Markets',
        rating: 3,
        min_deposit: 100,
        currency: 'USD',
        regulation: 'VFSC',
        spread: 'متغير',
        account_types: 'تقييم محايد',
        features: ['تقييم محايد'],
        status: 'neutral'
      },
      {
        id: 'binance',
        name: 'بايننس Binance',
        rating: 4,
        min_deposit: 50,
        currency: 'USD',
        regulation: 'متعدد',
        spread: 'لا يوجد',
        account_types: 'متعدد',
        features: ['شركة موثوقة'],
        status: 'verified'
      },
      {
        id: 'avatrade',
        name: 'AvaTrade',
        rating: 4,
        min_deposit: 100,
        currency: 'USD',
        regulation: 'متعدد',
        spread: 'متغير',
        account_types: 'متعدد',
        features: ['شركة موثوقة'],
        status: 'verified'
      }
    ];
  }
}

// Get all review brokers
const allBrokers = await fetchReviewBrokers();

// Sort brokers by rating (highest first)
const sortedBrokers = allBrokers.sort((a, b) => (b.rating || 0) - (a.rating || 0));
---

<BaseLayout 
  title="تقييم شركات التداول و البروكرات 2025" 
  description="تعرف على أفضل شركات التداول والبروكرات (شركات تداول الفوركس والأسهم) من خلال آراء موقع ثقة. تقييم الشركة الموثوقة، يعرض بشكل شفاف، المحايد بعني أنه يجب قراءة التقييم بعناية. لها الشركات غير موثوقة يجب تجنب التعامل معها بشكل كامل. يتم تقييم منصات وشركات التداول في هذه الصفحة بناء على مبادئ عمل فريق موقع ثقة"
>
  <div class="reviews-container">
    <!-- Page Header -->
    <header class="page-header">
      <div class="header-content">
        <h1>تقييم شركات التداول و البروكرات 2025</h1>
        <p class="description">
          تعرف على أفضل شركات التداول والبروكرات (شركات تداول الفوركس والأسهم) من خلال آراء موقع ثقة. تقييم الشركة الموثوقة، يعرض بشكل شفاف، المحايد يعني أنه يجب قراءة التقييم بعناية. لها الشركات غير موثوقة يجب تجنب التعامل معها بشكل كامل. يتم تقييم منصات وشركات التداول في هذه الصفحة بناء على مبادئ عمل فريق موقع ثقة
        </p>
      </div>
    </header>

    <!-- Brokers Grid -->
    <section class="brokers-section">
      <div class="brokers-grid">
        {sortedBrokers.map((broker: ReviewBroker) => (
          <article class="broker-card" data-status={broker.status} data-broker-id={broker.id}>
            <div class="broker-header">
              <div class="broker-info">
                <div class="broker-logo">
                  {broker.logo ? (
                    <img src={broker.logo} alt={`${broker.name} logo`} />
                  ) : (
                    <div class="logo-placeholder">{(broker.name || 'شركة')?.charAt(0)}</div>
                  )}
                </div>
                <div class="broker-details">
                  <h3 class="broker-name">{broker.name || 'شركة تداول'}</h3>
                  <div class="rating">
                    {Array.from({ length: 5 }, (_, i) => (
                      <span class={`star ${i < (broker.rating || 0) ? 'filled' : ''}`}>★</span>
                    ))}
                    <span class="rating-text">{broker.rating || 0}/5</span>
                  </div>
                </div>
              </div>
              
              <div class="status-badge" data-status={broker.status || 'neutral'}>
                {broker.status === 'verified' ? 'شركة موثوقة' : 
                 broker.status === 'neutral' ? 'تقييم محايد' : 
                 'تحذير'}
              </div>
            </div>

            <div class="broker-specs">
              <div class="spec-row">
                <span class="spec-label">أقل مبلغ للإيداع</span>
                <span class="spec-value">${broker.min_deposit || 'غير محدد'}</span>
              </div>
              <div class="spec-row">
                <span class="spec-label">الترخيص</span>
                <span class="spec-value">{broker.regulation || 'غير محدد'}</span>
              </div>
              <div class="spec-row">
                <span class="spec-label">عمولة السبريد</span>
                <span class="spec-value">{broker.spread || 'متغير'}</span>
              </div>
              <div class="spec-row">
                <span class="spec-label">حساب إسلامي</span>
                <span class="spec-value">{broker.account_types || 'متاح'}</span>
              </div>
            </div>

            <div class="broker-actions">
              <button class="btn-primary" 
                      data-url={broker.website_url} 
                      data-broker-name={broker.name}
                      data-broker-logo={broker.logo}>
                زيارة موقع {broker.name || 'الشركة'}
              </button>
              <a href={`/broker/${broker.id}`} class="btn-secondary">
                ملف الشركة
              </a>
            </div>
          </article>
        ))}
      </div>

      {allBrokers.length === 0 && (
        <div class="no-brokers">
          <h2>لا توجد شركات تداول متاحة حالياً</h2>
          <p>تابعنا للحصول على أحدث التقييمات</p>
        </div>
      )}
    </section>
  </div>

  <!-- Broker Modal Component -->
  <BrokerModal />
</BaseLayout>

<style>
  /* Container */
  .reviews-container {
    max-width: var(--container-max-width);
    margin: 0 auto;
    padding: 0 var(--space-12);
  }

  /* Page Header */
  .page-header {
    text-align: center;
    margin-bottom: var(--space-16);
    padding: var(--space-8) 0;
  }

  .header-content h1 {
    font-size: var(--font-size-3xl);
    color: rgb(var(--color-gray-900));
    margin-bottom: var(--space-6);
    font-weight: 700;
    line-height: 1.2;
  }

  .description {
    font-size: var(--font-size-lg);
    color: rgb(var(--color-gray-600));
    line-height: 1.6;
    max-width: 800px;
    margin: 0 auto;
  }

  /* Brokers Grid */
  .brokers-section {
    margin-bottom: var(--space-16);
  }

  .brokers-grid {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: var(--space-8);
    max-width: 1200px;
    margin: 0 auto;
  }

  /* Broker Card */
  .broker-card {
    background: white;
    border-radius: var(--border-radius);
    border: 1px solid rgb(var(--color-gray-200));
    box-shadow: var(--shadow-md);
    overflow: hidden;
    transition: all var(--transition-normal);
  }

  .broker-card:hover {
    transform: translateY(-2px);
    box-shadow: var(--shadow-lg);
  }

  /* Broker Header */
  .broker-header {
    padding: var(--space-6);
    border-bottom: 1px solid rgb(var(--color-gray-100));
  }

  .broker-info {
    display: flex;
    align-items: center;
    gap: var(--space-4);
    margin-bottom: var(--space-4);
  }

  .broker-logo {
    width: 60px;
    height: 60px;
    border-radius: var(--border-radius);
    overflow: hidden;
    background: rgb(var(--color-gray-100));
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .broker-logo img {
    width: 100%;
    height: 100%;
    object-fit: contain;
  }

  .logo-placeholder {
    font-size: var(--font-size-xl);
    font-weight: 700;
    color: rgb(var(--color-primary));
  }

  .broker-name {
    font-size: var(--font-size-xl);
    font-weight: 600;
    color: rgb(var(--color-gray-900));
    margin-bottom: var(--space-2);
  }

  .rating {
    display: flex;
    align-items: center;
    gap: var(--space-1);
  }

  .star {
    color: rgb(var(--color-gray-300));
    font-size: var(--font-size-lg);
  }

  .star.filled {
    color: #fbbf24;
  }

  .rating-text {
    font-size: var(--font-size-sm);
    color: rgb(var(--color-gray-600));
    margin-right: var(--space-2);
  }

  /* Status Badge */
  .status-badge {
    padding: var(--space-2) var(--space-4);
    border-radius: 20px;
    font-size: var(--font-size-sm);
    font-weight: 600;
    text-align: center;
  }

  .status-badge[data-status="verified"] {
    background: rgb(var(--color-success) / 0.1);
    color: rgb(var(--color-success));
  }

  .status-badge[data-status="neutral"] {
    background: rgb(var(--color-warning) / 0.1);
    color: rgb(var(--color-warning));
  }

  .status-badge[data-status="warning"] {
    background: rgb(var(--color-error) / 0.1);
    color: rgb(var(--color-error));
  }

  /* Broker Specs */
  .broker-specs {
    padding: var(--space-6);
  }

  .spec-row {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: var(--space-3) 0;
    border-bottom: 1px solid rgb(var(--color-gray-100));
  }

  .spec-row:last-child {
    border-bottom: none;
  }

  .spec-label {
    font-size: var(--font-size-sm);
    color: rgb(var(--color-gray-600));
  }

  .spec-value {
    font-size: var(--font-size-sm);
    font-weight: 600;
    color: rgb(var(--color-gray-900));
  }

  /* Broker Actions */
  .broker-actions {
    padding: var(--space-6);
    display: flex;
    gap: var(--space-3);
    background: rgb(var(--color-gray-50));
  }

  .btn-primary {
    flex: 1;
    padding: var(--space-3) var(--space-4);
    background: rgb(var(--color-primary));
    color: white;
    border: none;
    border-radius: var(--border-radius);
    font-weight: 600;
    font-size: var(--font-size-sm);
    cursor: pointer;
    transition: background-color var(--transition-fast);
    text-decoration: none;
    text-align: center;
  }

  .btn-primary:hover {
    background: rgb(var(--color-primary-dark));
  }

  .btn-secondary {
    padding: var(--space-3) var(--space-4);
    background: white;
    color: rgb(var(--color-primary));
    border: 1px solid rgb(var(--color-primary));
    border-radius: var(--border-radius);
    font-weight: 600;
    font-size: var(--font-size-sm);
    text-decoration: none;
    text-align: center;
    transition: all var(--transition-fast);
  }

  .btn-secondary:hover {
    background: rgb(var(--color-primary));
    color: white;
  }

  /* No Brokers */
  .no-brokers {
    text-align: center;
    padding: var(--space-16) var(--space-8);
    color: rgb(var(--color-gray-600));
  }

  .no-brokers h2 {
    margin-bottom: var(--space-4);
    color: rgb(var(--color-gray-900));
  }



  /* Responsive Design */
  @media (max-width: 1024px) {
    .reviews-container {
      padding: 0 var(--space-8);
    }

    .brokers-grid {
      grid-template-columns: repeat(2, 1fr);
      gap: var(--space-6);
    }
  }

  @media (max-width: 768px) {
    .reviews-container {
      padding: 0 var(--space-6);
    }

    .header-content h1 {
      font-size: var(--font-size-2xl);
    }

    .description {
      font-size: var(--font-size-base);
    }

    .brokers-grid {
      grid-template-columns: 1fr;
      gap: var(--space-6);
    }

    .broker-info {
      flex-direction: column;
      text-align: center;
      gap: var(--space-3);
    }

    .broker-actions {
      flex-direction: column;
    }
  }

  @media (max-width: 480px) {
    .reviews-container {
      padding: 0 var(--space-4);
    }

    .broker-header,
    .broker-specs,
    .broker-actions {
      padding: var(--space-4);
    }

    .broker-logo {
      width: 50px;
      height: 50px;
    }

    .broker-name {
      font-size: var(--font-size-lg);
    }
  }
</style>

<script>
  // Add click handlers for broker website buttons and modal functionality
  document.addEventListener('DOMContentLoaded', () => {
    const brokerButtons = document.querySelectorAll('.btn-primary') as NodeListOf<HTMLButtonElement>;
    
    // Wait for modal component to initialize
    const modalComponent = (window as any).brokerModal;
    
    // Get country data from worker (injected by Cloudflare Worker)
    const userCountry = (window as any).USER_COUNTRY || 'TH';
    const countryName = (window as any).COUNTRY_NAME || 'بلدك';
    const unsupportedBrokers = (window as any).UNSUPPORTED_BROKERS || [];
    
    // Create maps of unsupported brokers for quick lookup (by ID and name)
    const unsupportedMap = new Map();
    const unsupportedByName = new Map();
    
    unsupportedBrokers.forEach((item: any) => {
      const restrictionData = {
        restriction_type: item.restriction_type,
        reason: item.reason,
        alternative: {
          id: item.alternative_id,
          name: item.alternative_name,
          logo: item.alternative_logo,
          url: item.alternative_url
        }
      };
      
      // Map by broker_id (internal database ID - both string and number)
      unsupportedMap.set(item.broker_id.toString(), restrictionData);
      unsupportedMap.set(item.broker_id, restrictionData);
      
      // Map by company_id (external API ID - both string and number)
      if (item.company_id) {
        unsupportedMap.set(`company_${item.company_id}`, restrictionData);
        unsupportedMap.set(item.company_id.toString(), restrictionData);
        unsupportedMap.set(item.company_id, restrictionData);
      }
      
      // Map by broker name (case-insensitive)
      if (item.broker_name) {
        unsupportedByName.set(item.broker_name.toLowerCase(), restrictionData);
      }
    });
    
    // Default fallback broker
    const defaultBroker = {
      name: 'Exness',
      logo: 'https://theqalink.com/img/Evest-logo-2025.svg',
      url: 'https://one.exness.link/a/g6l4zosv'
    };
    
    brokerButtons.forEach(button => {
      button.addEventListener('click', (e) => {
        e.preventDefault();
        
        const brokerName = button.dataset.brokerName || 'الشركة';
        const brokerLogo = button.dataset.brokerLogo;
        const brokerCard = button.closest('.broker-card') as HTMLElement;
        const brokerId = brokerCard?.dataset.brokerId || button.dataset.brokerId;
        
        // Check if broker is unsupported in user's country
        // Try matching by broker_id first (internal DB ID)
        let restriction = unsupportedMap.get(brokerId);
        
        // If not found by broker_id, try by company_id (external API ID)
        if (!restriction && brokerId) {
          restriction = unsupportedMap.get(`company_${brokerId}`);
        }
        
        // If still not found, try by name
        if (!restriction && brokerName) {
          restriction = unsupportedByName.get(brokerName.toLowerCase());
        }
        
        // Also try common name variations
        if (!restriction && brokerName) {
          const nameVariations = [
            brokerName.toLowerCase().replace(/\s+/g, ''),
            brokerName.toLowerCase().replace('evest', 'evest'),
            brokerName.toLowerCase().replace('eVest', 'evest'),
            brokerName.toLowerCase().replace('xtb', 'xtb'),
            brokerName.toLowerCase().replace('exness', 'exness')
          ];
          
          for (const variation of nameVariations) {
            restriction = unsupportedByName.get(variation);
            if (restriction) break;
          }
        }
        
        console.log('Checking broker ID:', brokerId, 'Name:', brokerName);
        console.log('Trying lookups:', [brokerId, `company_${brokerId}`, brokerName?.toLowerCase()]);
        console.log('Restriction found:', restriction);
        console.log('Available restrictions by ID:', Array.from(unsupportedMap.keys()));
        console.log('Available restrictions by name:', Array.from(unsupportedByName.keys()));
        
        // Temporary force-show for eVest testing
        const isEvest = brokerName.toLowerCase().includes('evest') || 
                       brokerId?.toString().toLowerCase().includes('evest');
        
        if (restriction) {
          // Broker is not supported, show warning with alternative
          const alternative = restriction.alternative.name ? restriction.alternative : defaultBroker;
          
          // Use modal component to show popup
          if (modalComponent) {
            modalComponent.showModal(brokerName, countryName, alternative);
          }
          
          console.log(`Broker ${brokerName} is ${restriction.restriction_type} in ${userCountry}. Reason: ${restriction.reason}`);
        } else {
          // Broker is supported, redirect directly to their website
          const websiteUrl = button.dataset.url;
          if (websiteUrl && websiteUrl !== 'undefined') {
            window.open(websiteUrl, '_blank', 'noopener,noreferrer');
          } else {
            // Fallback: show modal with default broker
            if (modalComponent) {
              modalComponent.showModal(brokerName, countryName, defaultBroker);
            }
          }
        }
      });
    });
    
    // Debug logging
    console.log('User Country:', userCountry);
    console.log('Unsupported Brokers:', unsupportedBrokers);
  });
</script>
</BaseLayout>
