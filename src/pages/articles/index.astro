---
import { getCollection } from 'astro:content';
import BaseLayout from '../../layouts/BaseLayout.astro';

// Get all published articles
const allArticles = await getCollection('articles', ({ data }) => {
  return !data.draft;
});

// Sort articles by date (newest first)
const articles = allArticles.sort((a, b) => 
  new Date(b.data.publishDate).getTime() - new Date(a.data.publishDate).getTime()
);

// Get all unique tags
const allTags = [...new Set(articles.flatMap(article => article.data.tags))];

// Pagination setup
const ARTICLES_PER_PAGE = 9;
const currentPage = 1;
const totalPages = Math.ceil(articles.length / ARTICLES_PER_PAGE);
const startIndex = (currentPage - 1) * ARTICLES_PER_PAGE;
const endIndex = startIndex + ARTICLES_PER_PAGE;
const paginatedArticles = articles.slice(startIndex, endIndex);
---

<BaseLayout 
  title="جميع المقالات - المدونة العربية" 
  description="تصفح جميع المقالات والموضوعات المتنوعة في مدونتنا العربية"
>
  <div class="container">
    <!-- Page Header -->
    <header class="page-header">
      <h1>جميع المقالات</h1>
      <p>اكتشف مجموعة متنوعة من المقالات والموضوعات الشيقة</p>
    </header>

    <!-- Filter Section -->
    <section class="filter-section">
      <div class="search-bar">
        <input 
          type="text" 
          placeholder="ابحث في المقالات..." 
          id="searchInput"
          class="search-input"
        />
      </div>
      
      {allTags.length > 0 && (
        <div class="tags-filter">
          <h3>التصنيفات:</h3>
          <div class="tags-list">
            <button class="tag-filter active" data-tag="">الكل</button>
            {allTags.map((tag) => (
              <button class="tag-filter" data-tag={tag}>{tag}</button>
            ))}
          </div>
        </div>
      )}
    </section>

    <!-- Articles Grid -->
    <section class="articles-section">
      <div class="articles-grid" id="articlesGrid">
        {paginatedArticles.map((article) => (
          <article class="article-card" data-tags={article.data.tags.join(',')}>
            <a href={`/articles/${article.slug}`}>
              <div class="article-image-placeholder">
                <div class="placeholder-content">
                  <svg width="48" height="48" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M19 3H5C3.9 3 3 3.9 3 5V19C3 20.1 3.9 21 5 21H19C20.1 21 21 20.1 21 19V5C21 3.9 20.1 3 19 3ZM19 19H5V5H19V19Z" fill="currentColor"/>
                    <path d="M13.96 12.17L11.06 15.99L9 13.51L6 17H18L13.96 12.17Z" fill="currentColor"/>
                  </svg>
                  <span>صورة المقال</span>
                </div>
              </div>
              <div class="card-content">
                <h2>{article.data.title}</h2>
                <p>{article.data.description}</p>
                <div class="card-meta">
                  <span class="author">{article.data.author}</span>
                  <time datetime={article.data.publishDate.toISOString()}>
                    {article.data.publishDate.toLocaleDateString('ar-EG', {
                      year: 'numeric',
                      month: 'long',
                      day: 'numeric'
                    })}
                  </time>
                </div>
                {article.data.tags.length > 0 && (
                  <div class="tags">
                    {article.data.tags.map((tag) => (
                      <span class="tag">{tag}</span>
                    ))}
                  </div>
                )}
              </div>
            </a>
          </article>
        ))}
      </div>
      
      {articles.length === 0 && (
        <div class="no-articles">
          <h2>لا توجد مقالات متاحة حالياً</h2>
          <p>تابعنا للحصول على أحدث المقالات</p>
        </div>
      )}
    </section>

    <!-- Pagination -->
    {totalPages > 1 && (
      <nav class="pagination" aria-label="تصفح الصفحات">
        <div class="pagination-info">
          صفحة {currentPage} من {totalPages}
        </div>
        <!-- In a real implementation, you'd generate pagination links here -->
      </nav>
    )}
  </div>
</BaseLayout>

<style>
  /* Page Header */
  .page-header {
    text-align: center;
    margin-bottom: 3rem;
    padding: 2rem 0;
  }
  
  .page-header h1 {
    font-size: 2.5rem;
    color: var(--primary-color);
    margin-bottom: 1rem;
    font-weight: 700;
  }
  
  .page-header p {
    font-size: 1.125rem;
    color: var(--text-secondary);
  }

  /* Filter Section */
  .filter-section {
    background: var(--bg-secondary);
    padding: 2rem;
    border-radius: 1rem;
    margin-bottom: 3rem;
    border: 1px solid var(--border-color);
  }
  
  .search-bar {
    margin-bottom: 1.5rem;
  }
  
  .search-input {
    width: 100%;
    padding: 1rem;
    border: 1px solid var(--border-color);
    border-radius: 0.5rem;
    font-size: 1rem;
    font-family: inherit;
    background: white;
    transition: border-color 0.2s;
  }
  
  .search-input:focus {
    outline: none;
    border-color: var(--primary-color);
    box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.1);
  }
  
  .tags-filter h3 {
    margin-bottom: 1rem;
    color: var(--text-primary);
    font-size: 1.125rem;
  }
  
  .tags-list {
    display: flex;
    flex-wrap: wrap;
    gap: 0.75rem;
  }
  
  .tag-filter {
    background: white;
    border: 1px solid var(--border-color);
    color: var(--text-primary);
    padding: 0.5rem 1rem;
    border-radius: 2rem;
    cursor: pointer;
    transition: all 0.2s;
    font-family: inherit;
    font-size: 0.875rem;
  }
  
  .tag-filter:hover {
    background: var(--primary-color);
    color: white;
    border-color: var(--primary-color);
  }
  
  .tag-filter.active {
    background: var(--primary-color);
    color: white;
    border-color: var(--primary-color);
  }

  /* Articles Grid */
  .articles-section {
    margin-bottom: 3rem;
  }
  
  .articles-grid {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 2rem;
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 3rem;
  }
  
  .article-card {
    background: white;
    border-radius: 0.75rem;
    overflow: hidden;
    box-shadow: var(--shadow);
    transition: transform 0.2s, box-shadow 0.2s;
    border: 1px solid var(--border-color);
  }
  
  .article-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
  }
  
  .article-card a {
    display: block;
    text-decoration: none;
    color: inherit;
  }
  
  .article-image-placeholder {
    width: 100%;
    height: 200px;
    background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);
    display: flex;
    align-items: center;
    justify-content: center;
    border-bottom: 1px solid var(--border-color);
  }
  
  .placeholder-content {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 0.75rem;
    color: var(--text-secondary);
  }
  
  .placeholder-content svg {
    opacity: 0.5;
  }
  
  .placeholder-content span {
    font-size: 0.875rem;
    font-weight: 500;
  }
  
  .card-content {
    padding: 1.5rem;
  }
  
  .card-content h2 {
    font-size: 1.25rem;
    font-weight: 600;
    margin-bottom: 0.75rem;
    line-height: 1.4;
    color: var(--text-primary);
  }
  
  .card-content p {
    color: var(--text-secondary);
    margin-bottom: 1rem;
    line-height: 1.6;
  }
  
  .card-meta {
    display: flex;
    justify-content: space-between;
    align-items: center;
    font-size: 0.875rem;
    color: var(--text-secondary);
    margin-bottom: 1rem;
  }
  
  .author {
    font-weight: 500;
    color: var(--primary-color);
  }
  
  .tags {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
  }
  
  .tag {
    background: var(--bg-secondary);
    color: var(--text-secondary);
    padding: 0.25rem 0.75rem;
    border-radius: 1rem;
    font-size: 0.75rem;
    font-weight: 500;
  }

  /* No Articles */
  .no-articles {
    text-align: center;
    padding: 4rem 2rem;
    color: var(--text-secondary);
  }
  
  .no-articles h2 {
    margin-bottom: 1rem;
    color: var(--text-primary);
  }

  /* Pagination */
  .pagination {
    display: flex;
    justify-content: center;
    align-items: center;
    margin-top: 3rem;
  }
  
  .pagination-info {
    color: var(--text-secondary);
    font-size: 0.875rem;
  }

  /* Hidden class for filtering */
  .article-card.hidden {
    display: none;
  }

  /* Responsive */
  @media (max-width: 768px) {
    .page-header h1 {
      font-size: 2rem;
    }
    
    .filter-section {
      padding: 1.5rem;
    }
    
    .tags-list {
      gap: 0.5rem;
    }
    
    .articles-grid {
      grid-template-columns: repeat(2, 1fr);
      gap: 1.5rem;
      padding: 0 2rem;
    }
    
    .card-content {
      padding: 1rem;
    }
  }
  
  @media (max-width: 480px) {
    .articles-grid {
      grid-template-columns: 1fr;
      gap: 2rem;
      padding: 0 1rem;
    }
  }
</style>

<script>
  // Search functionality
  const searchInput = document.getElementById('searchInput') as HTMLInputElement;
  const articleCards = document.querySelectorAll('.article-card') as NodeListOf<HTMLElement>;
  const tagFilters = document.querySelectorAll('.tag-filter') as NodeListOf<HTMLButtonElement>;

  let currentTagFilter = '';

  // Search function
  function filterArticles() {
    const searchTerm = searchInput.value.toLowerCase();
    
    articleCards.forEach(card => {
      const title = card.querySelector('h2')?.textContent?.toLowerCase() || '';
      const description = card.querySelector('p')?.textContent?.toLowerCase() || '';
      const tags = card.dataset.tags?.toLowerCase() || '';
      
      const matchesSearch = title.includes(searchTerm) || 
                           description.includes(searchTerm) || 
                           tags.includes(searchTerm);
      
      const matchesTag = !currentTagFilter || 
                        tags.split(',').includes(currentTagFilter.toLowerCase());
      
      if (matchesSearch && matchesTag) {
        card.classList.remove('hidden');
      } else {
        card.classList.add('hidden');
      }
    });
  }

  // Search input event
  searchInput.addEventListener('input', filterArticles);

  // Tag filter events
  tagFilters.forEach(button => {
    button.addEventListener('click', () => {
      // Remove active class from all buttons
      tagFilters.forEach(btn => btn.classList.remove('active'));
      
      // Add active class to clicked button
      button.classList.add('active');
      
      // Set current filter
      currentTagFilter = button.dataset.tag || '';
      
      // Filter articles
      filterArticles();
    });
  });
</script>
