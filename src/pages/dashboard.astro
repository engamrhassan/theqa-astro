---
// Cache Monitoring Dashboard
export const prerender = true;
---

<!DOCTYPE html>
<html lang="ar" dir="rtl">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Cache Monitoring Dashboard - TheQA</title>
    <meta name="description" content="Real-time monitoring dashboard for broker data cache and worker performance">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }
        
        .dashboard {
            max-width: 1200px;
            margin: 0 auto;
        }
        
        h1 {
            color: white;
            text-align: center;
            margin-bottom: 30px;
            font-size: 2.5rem;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
        }
        
        .cards-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }
        
        .card {
            background: white;
            border-radius: 15px;
            padding: 25px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.2);
            transition: transform 0.3s ease;
        }
        
        .card:hover {
            transform: translateY(-5px);
        }
        
        .card h3 {
            color: #333;
            margin-bottom: 15px;
            font-size: 1.4rem;
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .status-badge {
            padding: 5px 12px;
            border-radius: 20px;
            font-size: 0.85rem;
            font-weight: bold;
        }
        
        .status-healthy {
            background: #d1fae5;
            color: #065f46;
        }
        
        .status-warning {
            background: #fef3c7;
            color: #92400e;
        }
        
        .status-error {
            background: #fee2e2;
            color: #991b1b;
        }
        
        .metric-item {
            display: flex;
            justify-content: space-between;
            padding: 8px 0;
            border-bottom: 1px solid #f0f0f0;
        }
        
        .metric-item:last-child {
            border-bottom: none;
        }
        
        .metric-label {
            color: #666;
        }
        
        .metric-value {
            font-weight: bold;
            color: #333;
        }
        
        .refresh-btn {
            background: #667eea;
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 8px;
            cursor: pointer;
            font-size: 1rem;
            transition: background 0.3s ease;
            margin: 10px 0;
        }
        
        .refresh-btn:hover {
            background: #5a6fd8;
        }
        
        .loading {
            text-align: center;
            color: #666;
            padding: 20px;
        }
        
        .error {
            color: #dc2626;
            padding: 20px;
            background: #fee2e2;
            border-radius: 8px;
            margin: 10px 0;
        }
        
        pre {
            background: #f8f9fa;
            padding: 15px;
            border-radius: 8px;
            overflow-x: auto;
            font-size: 0.85rem;
            max-height: 300px;
            overflow-y: auto;
        }
        
        .tabs {
            display: flex;
            background: white;
            border-radius: 10px 10px 0 0;
            overflow: hidden;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        
        .tab {
            flex: 1;
            padding: 15px 20px;
            background: #f8f9fa;
            border: none;
            cursor: pointer;
            transition: background 0.3s ease;
            font-size: 1rem;
        }
        
        .tab.active {
            background: white;
        }
        
        .tab-content {
            background: white;
            border-radius: 0 0 10px 10px;
            padding: 20px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        
        .hidden {
            display: none;
        }
        
        .chart-placeholder {
            height: 200px;
            background: linear-gradient(45deg, #f0f0f0 25%, transparent 25%), 
                        linear-gradient(-45deg, #f0f0f0 25%, transparent 25%), 
                        linear-gradient(45deg, transparent 75%, #f0f0f0 75%), 
                        linear-gradient(-45deg, transparent 75%, #f0f0f0 75%);
            background-size: 20px 20px;
            background-position: 0 0, 0 10px, 10px -10px, -10px 0px;
            border-radius: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            color: #666;
            font-weight: bold;
            flex-direction: column;
        }
        
        .countries-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            margin-top: 15px;
        }
        
        .country-card {
            background: #f8f9fa;
            padding: 15px;
            border-radius: 8px;
            text-align: center;
        }
        
        .country-flag {
            font-size: 2rem;
            margin-bottom: 8px;
        }
        
        .recommendations {
            background: #e0f2fe;
            border: 1px solid #0288d1;
            border-radius: 8px;
            padding: 15px;
            margin-top: 15px;
        }
        
        .recommendations h4 {
            color: #01579b;
            margin-bottom: 10px;
        }
        
        .recommendations ul {
            color: #0277bd;
            padding-left: 20px;
        }
        
        .warm-cache-btn {
            background: #ff6b6b;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 6px;
            cursor: pointer;
            font-size: 0.9rem;
            margin-left: 10px;
        }
        
        .warm-cache-btn:hover {
            background: #ff5252;
        }
        
        .timestamp {
            font-size: 0.8rem;
            color: #999;
            text-align: center;
            margin-top: 10px;
        }
    </style>
</head>
<body>
    <div class="dashboard">
        <h1>üöÄ Worker Health Dashboard</h1>
        
        <div class="cards-grid">
            <div class="card">
                <h3>
                    üè• System Health
                    <span id="health-badge" class="status-badge">Loading...</span>
                </h3>
                <button class="refresh-btn" onclick="refreshHealth()">Refresh</button>
                <div id="health-content" class="loading">Loading health data...</div>
            </div>
            
            <div class="card">
                <h3>üìä Performance Metrics</h3>
                <button class="refresh-btn" onclick="refreshMetrics()">Refresh</button>
                <button class="warm-cache-btn" onclick="warmCache()">üî• Warm Cache</button>
                <div id="metrics-content" class="loading">Loading metrics...</div>
            </div>
            
            <div class="card">
                <h3>üåç Cache Status</h3>
                <button class="refresh-btn" onclick="refreshCacheStatus()">Refresh</button>
                <div id="cache-content" class="loading">Loading cache status...</div>
            </div>
        </div>
        
        <div class="tabs">
            <button class="tab active" onclick="showTab('debug')">Debug Info</button>
            <button class="tab" onclick="showTab('raw')">Raw JSON</button>
            <button class="tab" onclick="showTab('countries')">Countries</button>
        </div>
        
        <div class="tab-content">
            <div id="debug-tab" class="tab-panel">
                <div id="debug-content" class="loading">Loading debug information...</div>
            </div>
            
            <div id="raw-tab" class="tab-panel hidden">
                <pre id="raw-content">Loading raw data...</pre>
            </div>
            
            <div id="countries-tab" class="tab-panel hidden">
                <div id="countries-content">
                    <div class="countries-grid">
                        <div class="country-card">
                            <div class="country-flag">üá∏üá¶</div>
                            <div>Saudi Arabia (SA)</div>
                            <button onclick="checkCountryCache('SA')">Check Cache</button>
                        </div>
                        <div class="country-card">
                            <div class="country-flag">üá™üá¨</div>
                            <div>Egypt (EG)</div>
                            <button onclick="checkCountryCache('EG')">Check Cache</button>
                        </div>
                        <div class="country-card">
                            <div class="country-flag">üá¶üá™</div>
                            <div>UAE (AE)</div>
                            <button onclick="checkCountryCache('AE')">Check Cache</button>
                        </div>
                        <div class="country-card">
                            <div class="country-flag">üá∫üá∏</div>
                            <div>USA (US)</div>
                            <button onclick="checkCountryCache('US')">Check Cache</button>
                        </div>
                        <div class="country-card">
                            <div class="country-flag">üá¨üáß</div>
                            <div>UK (GB)</div>
                            <button onclick="checkCountryCache('GB')">Check Cache</button>
                        </div>
                        <div class="country-card">
                            <div class="country-flag">üá©üá™</div>
                            <div>Germany (DE)</div>
                            <button onclick="checkCountryCache('DE')">Check Cache</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="timestamp" id="last-update">
            Last updated: Never
        </div>
    </div>

    <script>
        const BASE_URL = window.location.origin;
        let healthData = {};
        let metricsData = {};
        let debugData = {};
        
        // Initialize dashboard
        document.addEventListener('DOMContentLoaded', function() {
            refreshAll();
            
            // Auto-refresh every 30 seconds
            setInterval(refreshAll, 30000);
        });
        
        async function refreshAll() {
            await Promise.all([
                refreshHealth(),
                refreshMetrics(),
                refreshCacheStatus(),
                refreshDebug()
            ]);
            
            document.getElementById('last-update').textContent = 
                `Last updated: ${new Date().toLocaleString('ar-SA')}`;
        }
        
        async function refreshHealth() {
            try {
                const response = await fetch(`${BASE_URL}/__health`);
                healthData = await response.json();
                
                updateHealthDisplay(healthData);
                updateRawContent();
            } catch (error) {
                document.getElementById('health-content').innerHTML = 
                    `<div class="error">Error: ${error.message}</div>`;
            }
        }
        
        async function refreshMetrics() {
            try {
                const response = await fetch(`${BASE_URL}/__metrics`);
                metricsData = await response.json();
                
                updateMetricsDisplay(metricsData);
                updateRawContent();
            } catch (error) {
                document.getElementById('metrics-content').innerHTML = 
                    `<div class="error">Error: ${error.message}</div>`;
            }
        }
        
        async function refreshCacheStatus() {
            try {
                const response = await fetch(`${BASE_URL}/__cache-status`);
                const cacheData = await response.json();
                
                updateCacheDisplay(cacheData);
            } catch (error) {
                document.getElementById('cache-content').innerHTML = 
                    `<div class="error">Error: ${error.message}</div>`;
            }
        }
        
        async function refreshDebug() {
            try {
                const response = await fetch(`${BASE_URL}/__debug`);
                debugData = await response.json();
                
                updateDebugDisplay(debugData);
            } catch (error) {
                document.getElementById('debug-content').innerHTML = 
                    `<div class="error">Error: ${error.message}</div>`;
            }
        }
        
        async function warmCache() {
            try {
                const response = await fetch(`${BASE_URL}/__warm-cache`, {
                    method: 'POST',
                    headers: {
                        'Authorization': 'Bearer dfdf76dfdfyuh343kfd63hje3',
                        'Content-Type': 'application/json'
                    }
                });
                
                const result = await response.json();
                
                if (result.success) {
                    alert('‚úÖ Cache warming completed successfully!');
                    refreshAll();
                } else {
                    alert('‚ùå Cache warming failed: ' + result.error);
                }
            } catch (error) {
                alert('‚ùå Error warming cache: ' + error.message);
            }
        }
        
        async function checkCountryCache(countryCode) {
            try {
                const response = await fetch(`${BASE_URL}/__debug?country=${countryCode}`);
                const data = await response.json();
                
                const info = `
Country: ${countryCode}
Brokers: ${data.database.brokersCount}
Unsupported: ${data.database.unsupportedCount}
Cache Status: ${data.cache.status?.cached ? 'Cached' : 'Not Cached'}
Data Age: ${data.cache.status?.dataAge || 'N/A'}
                `.trim();
                
                alert(info);
            } catch (error) {
                alert('Error checking country cache: ' + error.message);
            }
        }
        
        function updateHealthDisplay(health) {
            const badge = document.getElementById('health-badge');
            const content = document.getElementById('health-content');
            
            // Update status badge
            badge.textContent = health.status.toUpperCase();
            badge.className = `status-badge status-${health.status === 'healthy' ? 'healthy' : 
                                                    health.status === 'degraded' ? 'warning' : 'error'}`;
            
            // Update content
            let html = `
                <div class="metric-item">
                    <span class="metric-label">Response Time:</span>
                    <span class="metric-value">${health.responseTime}ms</span>
                </div>
                <div class="metric-item">
                    <span class="metric-label">Database:</span>
                    <span class="metric-value status-${health.checks.database.status}">${health.checks.database.status}</span>
                </div>
                <div class="metric-item">
                    <span class="metric-label">Cache:</span>
                    <span class="metric-value status-${health.checks.cache.status}">${health.checks.cache.status}</span>
                </div>
                <div class="metric-item">
                    <span class="metric-label">Broker Data:</span>
                    <span class="metric-value">${health.checks.brokerData.count} brokers</span>
                </div>
            `;
            
            if (health.metrics) {
                html += `
                    <div class="metric-item">
                        <span class="metric-label">Hit Rate:</span>
                        <span class="metric-value">${health.metrics.cacheHitRate}</span>
                    </div>
                `;
            }
            
            content.innerHTML = html;
        }
        
        function updateMetricsDisplay(metrics) {
            const content = document.getElementById('metrics-content');
            const totalRequests = (metrics.hits || 0) + (metrics.misses || 0);
            const hitRate = totalRequests > 0 ? ((metrics.hits || 0) / totalRequests * 100).toFixed(1) : 0;
            
            let html = `
                <div class="metric-item">
                    <span class="metric-label">Cache Hit Rate:</span>
                    <span class="metric-value">${hitRate}%</span>
                </div>
                <div class="metric-item">
                    <span class="metric-label">Total Requests:</span>
                    <span class="metric-value">${totalRequests}</span>
                </div>
                <div class="metric-item">
                    <span class="metric-label">Cache Hits:</span>
                    <span class="metric-value">${metrics.hits || 0}</span>
                </div>
                <div class="metric-item">
                    <span class="metric-label">Cache Misses:</span>
                    <span class="metric-value">${metrics.misses || 0}</span>
                </div>
                <div class="metric-item">
                    <span class="metric-label">Errors:</span>
                    <span class="metric-value">${metrics.errors || 0}</span>
                </div>
            `;
            
            if (metrics.avgProcessingTime) {
                html += `
                    <div class="metric-item">
                        <span class="metric-label">Avg Processing Time:</span>
                        <span class="metric-value">${metrics.avgProcessingTime.toFixed(1)}ms</span>
                    </div>
                `;
            }
            
            // Top countries
            if (metrics.countries && Object.keys(metrics.countries).length > 0) {
                html += '<br><strong>Top Countries:</strong><br>';
                const sortedCountries = Object.entries(metrics.countries)
                    .sort(([,a], [,b]) => b - a)
                    .slice(0, 5);
                
                sortedCountries.forEach(([country, count]) => {
                    html += `
                        <div class="metric-item">
                            <span class="metric-label">${country}:</span>
                            <span class="metric-value">${count} requests</span>
                        </div>
                    `;
                });
            }
            
            content.innerHTML = html;
        }
        
        function updateCacheDisplay(cache) {
            const content = document.getElementById('cache-content');
            
            let html = `
                <div class="metric-item">
                    <span class="metric-label">Country:</span>
                    <span class="metric-value">${cache.country}</span>
                </div>
                <div class="metric-item">
                    <span class="metric-label">Cache Status:</span>
                    <span class="metric-value">${cache.cached ? '‚úÖ Cached' : '‚ùå Not Cached'}</span>
                </div>
                <div class="metric-item">
                    <span class="metric-label">Data Age:</span>
                    <span class="metric-value">${cache.dataAge || 'N/A'}</span>
                </div>
                <div class="metric-item">
                    <span class="metric-label">Brokers:</span>
                    <span class="metric-value">${cache.brokerCount}</span>
                </div>
                <div class="metric-item">
                    <span class="metric-label">Restrictions:</span>
                    <span class="metric-value">${cache.restrictionCount}</span>
                </div>
                <div class="metric-item">
                    <span class="metric-label">Hit Rate:</span>
                    <span class="metric-value">${cache.hitRate}</span>
                </div>
            `;
            
            if (cache.recommendations && cache.recommendations.length > 0) {
                html += `
                    <div class="recommendations">
                        <h4>üí° Recommendations:</h4>
                        <ul>
                            ${cache.recommendations.map(rec => `<li>${rec}</li>`).join('')}
                        </ul>
                    </div>
                `;
            }
            
            content.innerHTML = html;
        }
        
        function updateDebugDisplay(debug) {
            const content = document.getElementById('debug-content');
            
            const html = `
                <div class="metric-item">
                    <span class="metric-label">Worker Version:</span>
                    <span class="metric-value">${debug.worker.version}</span>
                </div>
                <div class="metric-item">
                    <span class="metric-label">Country Detected:</span>
                    <span class="metric-value">${debug.request.country}</span>
                </div>
                <div class="metric-item">
                    <span class="metric-label">Cloudflare Colo:</span>
                    <span class="metric-value">${debug.request.colo || 'N/A'}</span>
                </div>
                <div class="metric-item">
                    <span class="metric-label">Timezone:</span>
                    <span class="metric-value">${debug.request.timezone || 'N/A'}</span>
                </div>
                <div class="metric-item">
                    <span class="metric-label">Database Brokers:</span>
                    <span class="metric-value">${debug.database.brokersCount}</span>
                </div>
                <div class="metric-item">
                    <span class="metric-label">Country Sorting:</span>
                    <span class="metric-value">${debug.database.countrySortingCount}</span>
                </div>
                <div class="metric-item">
                    <span class="metric-label">Unsupported:</span>
                    <span class="metric-value">${debug.database.unsupportedCount}</span>
                </div>
            `;
            
            content.innerHTML = html;
        }
        
        function updateRawContent() {
            const rawContent = document.getElementById('raw-content');
            const combinedData = {
                health: healthData,
                metrics: metricsData,
                debug: debugData,
                timestamp: new Date().toISOString()
            };
            
            rawContent.textContent = JSON.stringify(combinedData, null, 2);
        }
        
        function showTab(tabName) {
            // Hide all tabs
            document.querySelectorAll('.tab').forEach(tab => tab.classList.remove('active'));
            document.querySelectorAll('.tab-panel').forEach(panel => panel.classList.add('hidden'));
            
            // Show selected tab
            event.target.classList.add('active');
            document.getElementById(tabName + '-tab').classList.remove('hidden');
        }
    </script>
</body>
</html>
