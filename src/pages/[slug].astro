---
import BaseLayout from '../layouts/BaseLayout.astro';
import BrokerList from '../components/BrokerList.astro';
import BrokerTable from '../components/BrokerTable.astro';
import BeginnerBrokerTable from '../components/BeginnerBrokerTable.astro';
import PopularBrokerTable from '../components/PopularBrokerTable.astro';
import pageCache from '../data/page-cache.json';

export async function getStaticPaths() {
  return [
    {
      params: { slug: 'شركات-تداول-مرخصة-في-السعودية' },
      props: {
        apiSlug: 'شركات-تداول-مرخصة-في-السعودية',
        defaultTitle: 'شركات التداول المرخصة في السعودية - المدونة العربية',
        defaultDescription: 'دليل شامل لأهم شركات التداول المرخصة والموثوقة في المملكة العربية السعودية'
      }
    },
    {
      params: { slug: 'منصات-تداول-العملات-الرقمية-في-الإمارات' },
      props: {
        apiSlug: 'منصات-تداول-العملات-الرقمية-في-الإمارات',
        defaultTitle: 'منصات التداول المرخصة في الإمارات - المدونة العربية',
        defaultDescription: 'دليل شامل لأهم منصات التداول المرخصة والموثوقة في الإمارات'
      }
    }
  ];
}

const { slug } = Astro.params;
const { apiSlug, defaultTitle, defaultDescription } = Astro.props;

// API configuration
const API_CONFIG = {
  url: `https://theqalink.com/api/v1/page/${apiSlug}`,
  headers: {
    "Accept": "application/json",
    "X-API-Hash": "b3da624e147174b654c4c9358ac40c4ca716cb9db56b0da0e2f8200553922ac0",
    "Authorization": "Basic YWRtaW46U0F3S3EzQUg5bVZxVg==",
    "Cache-Control": "no-cache"
  }
};

let pageData = null;
let error = null;

try {
  // Fetch from API with timeout for better performance
  const controller = new AbortController();
  const timeoutId = setTimeout(() => controller.abort(), 5000); // 5 second timeout
  
  const response = await fetch(API_CONFIG.url, {
    method: "GET",
    headers: API_CONFIG.headers,
    redirect: "follow",
    signal: controller.signal
  });
  
  clearTimeout(timeoutId);
  
  if (!response.ok) {
    throw new Error(`HTTP error! status: ${response.status}`);
  }
  
  const data = await response.json();
  
  // Extract content from API response
  const extractedTitle = data.page?.name || '';
  let extractedContent = data.page?.content || '';
  
  // Replace [beginner-57] placeholder with a marker for worker injection
  extractedContent = extractedContent.replace(/\[beginner-57\]/g, '<!-- BEGINNER_BROKERS_PLACEHOLDER -->');
  
  // Replace [popular-58] placeholder with a marker for worker injection
  extractedContent = extractedContent.replace(/\[popular-58\]/g, '<!-- POPULAR_BROKERS_PLACEHOLDER -->');
  
  pageData = {
    title: extractedTitle,
    content: extractedContent,
    excerpt: '',
    meta_description: data.data?.meta_description || '',
    updated_at: new Date().toISOString()
  };

} catch (err) {
  console.error('API fetch failed, using fallback data:', err);
  
  // Fallback to cached data if API fails
  const cachedData = pageCache[apiSlug as keyof typeof pageCache];
  
  if (cachedData) {
    let processedContent = cachedData.content;
    processedContent = processedContent.replace(/\[beginner-57\]/g, '<!-- BEGINNER_BROKERS_PLACEHOLDER -->');
    processedContent = processedContent.replace(/\[popular-58\]/g, '<!-- POPULAR_BROKERS_PLACEHOLDER -->');
    
    pageData = {
      title: cachedData.title,
      content: processedContent,
      excerpt: '',
      meta_description: cachedData.meta_description,
      updated_at: cachedData.updated_at
    };
  } else {
  error = err instanceof Error ? err.message : 'حدث خطأ في تحميل البيانات';
  pageData = null;
  }
}
---

<BaseLayout 
  title={pageData?.title || defaultTitle}
  description={pageData?.meta_description || defaultDescription}
>
  <div class="container">
    {pageData && (
      <>
        <!-- Dynamic Page Header -->
        <header class="page-header">
          <div class="header-content">
            <div class="badge">محتوى مُحدث</div>
            <h1 class="fade-in">{pageData.title}</h1>
            {pageData.excerpt && (
              <p class="subtitle fade-in-delay">{pageData.excerpt}</p>
            )}
            <div class="header-meta fade-in-delay-2">
              <span class="meta-item">
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                  <path d="M12 2C6.48 2 2 6.48 2 12S6.48 22 12 22 22 17.52 22 12 17.48 2 12 2ZM13 17H11V11H13V17ZM13 9H11V7H13V9Z" fill="currentColor"/>
                </svg>
                محتوى موثوق
              </span>
              {pageData.updated_at && (
                <span class="meta-item">
                  <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M9 11H7V13H9V11ZM13 11H11V13H13V11ZM17 11H15V13H17V11ZM19 3H18V1H16V3H8V1H6V3H5C3.89 3 3.01 3.9 3.01 5L3 19C3 20.1 3.89 21 5 21H19C20.1 21 21 20.1 21 19V5C21 3.9 20.1 3 19 3ZM19 19H5V8H19V19Z" fill="currentColor"/>
                  </svg>
                  آخر تحديث: {new Date(pageData.updated_at).toLocaleDateString('ar-SA')}
                </span>
              )}
            </div>
          </div>
        </header>

        <!-- Dynamic Broker List Component -->
        <h2 class="section-header">أفضل شركات التداول المرخصة في السعودية لعام 2025</h2>
        <BrokerList 
          title="أفضل شركات التداول في منطقتك"
          subtitle="شركات مرخصة وموثوقة مرتبة حسب موقعك الجغرافي"
        />

        <!-- Dynamic Content Section -->
        <main class="content-main">
          <article class="content-article">
            <div class="content-body">
              <!-- Content will be processed by Cloudflare Worker -->
              <!-- Worker replaces [beginner-57] -> BEGINNER_BROKERS_PLACEHOLDER -> dynamic table -->
              <!-- Worker replaces [popular-58] -> POPULAR_BROKERS_PLACEHOLDER -> dynamic table -->
              <div set:html={pageData.content}></div>
              
              <!-- Fallback tables (shown if Worker doesn't process placeholders) -->
              <BeginnerBrokerTable showPlaceholder={true} />
              <PopularBrokerTable showPlaceholder={true} />
            </div>
          </article>
          
          <aside class="content-sidebar">
            <div class="sidebar-card">
              <h3>معلومات مهمة</h3>
              <ul class="info-list">
                <li>تحقق من الترخيص الرسمي</li>
                <li>اقرأ الشروط والأحكام</li>
                <li>ابدأ بحساب تجريبي</li>
                <li>استشر خبراء الاستثمار</li>
              </ul>
            </div>
          </aside>
        </main>
      </>
    )}
    
    {!pageData && (
      <div class="error-state">
        <div class="error-content">
          <svg width="64" height="64" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M12 2C6.48 2 2 6.48 2 12S6.48 22 12 22 22 17.52 22 12 17.48 2 12 2ZM13 17H11V15H13V17ZM13 13H11V7H13V13Z" fill="currentColor"/>
          </svg>
          <h2>خطأ في تحميل المحتوى</h2>
          <p>عذراً، لم نتمكن من تحميل محتوى الصفحة. يرجى المحاولة مرة أخرى لاحقاً.</p>
          {error && <p style="margin-top: 1rem; font-size: 0.875rem; opacity: 0.7;">تفاصيل الخطأ: {error}</p>}
          <button class="retry-button" onclick="window.location.reload()">إعادة المحاولة</button>
        </div>
      </div>
    )}
  </div>
</BaseLayout>




